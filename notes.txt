Youtube backend

model link: https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj

Steps to setup
1. init for backend
2. README.model 
3. public -> temp -> .gitkeep
4. .gitignore - > https://mrkandreev.name/snippets/gitignore-generator/#Node
5. .env
6. src folder with index.js, constants.js, app.js
7. package.json -> 
    - type
    - nodemon dev dependecies (dev dependecies foes not go in production it is only for development) -> npm i -D nodemon
    also to start we have to set a script for nodemon
8. folders in src
   - models
   - controllers (functionalities)
   - routes
   - utils (repeated functionalities like taking toke, email, file uploading etc)
   - db
   - middlewares
9. In some cases we also install prettier although it is used more as dev dependecies
10. prettier files -> 
   - .prettierrc for basic settings
   - .prettierignore for files which you do not want prettier to change
   

   -----------------------------------------------------------------------------------

Connecting database in MERN with debugging

- Created MongoDb Atlas account.
- Created a Database and connect I.P Address to access database from anywhere.
- Used `dotenv , mongoose , express` packages.
- Two important points about database connectivity: 

    1. When connecting to databases, handling potential data-not-found scenarios is essential. Employ try/catch blocks or promises to manage errors or we can also use promises.

        - key to remember : ( wrap in try-catch )

    2. Database operations involve latency, and traditional synchronous code can lead to blocking, where the program waits for the database query to complete before moving on. So, we should async/await which allows for non-blocking execution, enabling the program to continue with other tasks while waiting for the database response. 

        - key to remember :  ( always remember the database is in another continent, so use async await)


- Used two approach to connect the database - 1. In Index File, 2. In Seprate DB file

- Assignments ------>
    - console log `connectionInstance`
    - Read more about process.exit code


    1. using exit() method of process object:
    usecase: It is used if you want to terminate the execution completely regardless of any async operation an all.
    default value exit(0)  which indicate exit successfully without any interption.
    any non zero value  like exit(1) indicates process exit intentionaly.

code :   
 function hello() {
    process.exit(1);
    console.log('hello');
}
hello();

in this  code process will terminate without logging hello in the console.

2. using exitCode property  of process:
    usecase: It is used if you want to terminate the execution completely but allowing to completion of the pending tasks.
    default value exitCode=0  which indicate exit successfully without any interption.
    any non zero value  like exitCode=1 indicates process exit intentionaly.

code: 
function hello() {
    process.exitCode = 1;
    console.log('hello');
}
hello();

 -----------------------------------------------------------------------------------


